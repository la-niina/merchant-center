name: Build and Release for Windows

on:
  push:
    branches:
      - main
    tags:
      - 'v*'  # Trigger on version tags
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write  # Explicitly grant permissions for release creation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'  # Enable Gradle caching

      - name: Get version from tag or use default
        id: get_version
        shell: pwsh
        run: |
          $version = if ($env:GITHUB_REF.StartsWith("refs/tags/v")) {
              $env:GITHUB_REF.Substring(11)  # Remove 'refs/tags/v'
          } else {
              "1.0.1-snapshot"
          }
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "Detected version: $version"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: wrapper

      - name: Build with Gradle
        run: |
          ./gradlew build --info
          echo "Build completed successfully"

      - name: Run tests
        run: |
          ./gradlew test --info
          echo "Tests completed successfully"

      - name: Package the application
        run: |
          ./gradlew packageReleaseMsi --info -Pversion=${{ steps.get_version.outputs.VERSION }}
          echo "Packaging completed"

      - name: Verify MSI creation
        shell: pwsh
        run: |
          $msiPath = "build\compose\binaries\main-release\msi"
          if (!(Test-Path $msiPath)) {
              echo "::error::MSI directory not found at: $msiPath"
              exit 1
          }
          echo "MSI directory exists at: $msiPath"
          Get-ChildItem -Path $msiPath -Recurse

      - name: Find MSI file
        id: find_msi
        shell: pwsh
        run: |
          $msiPath = "build\compose\binaries\main-release\msi"
          $msiFile = Get-ChildItem -Path $msiPath -Filter "*.msi" -Recurse | Select-Object -First 1
          if ($msiFile) {
              $relativePath = $msiFile.FullName.Replace($env:GITHUB_WORKSPACE + "\", "")
              echo "MSI_PATH=$relativePath" >> $env:GITHUB_OUTPUT
              echo "MSI_NAME=$($msiFile.Name)" >> $env:GITHUB_OUTPUT
              echo "Found MSI at: $relativePath"
          } else {
              echo "::error::No MSI file found in $msiPath"
              exit 1
          }

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-msi-installer
          path: ${{ steps.find_msi.outputs.MSI_PATH }}
          retention-days: 5
          if-no-files-found: error

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.find_msi.outputs.MSI_PATH }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use default token

      - name: Upload Release Asset (Fallback)
        if: failure() && startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_msi.outputs.MSI_PATH }}
          asset_name: ${{ steps.find_msi.outputs.MSI_NAME }}
          asset_content_type: application/x-msi