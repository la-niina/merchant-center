name: Build and Release for Windows

on:
  push:
    branches:
      - main
    tags:
      - 'v*'  # Trigger on version tags
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Get version from tag or use default
        id: get_version
        shell: pwsh
        run: |
          $version = $env:GITHUB_REF -replace 'refs/tags/v', ''
          if (-not $version) {
            $version = "1.0.1-snapshot"
          }
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "Detected version: $version"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: wrapper

      - name: Build with Gradle
        run: |
          ./gradlew build
          echo "Build completed successfully"

      - name: Run tests
        run: |
          ./gradlew test
          echo "Tests completed successfully"

      - name: Package the application
        run: |
          ./gradlew packageReleaseMsi -Pversion=${{ steps.get_version.outputs.VERSION }}
          echo "Packaging completed"

      - name: List MSI directory
        run: |
          dir "build\compose\binaries\main\msi"

      - name: Find MSI file
        id: find_msi
        shell: pwsh
        run: |
          $msiFile = Get-ChildItem -Path "build\compose\binaries\main\msi" -Filter "*.msi" | Select-Object -First 1
          if ($msiFile) {
            echo "MSI_PATH=$($msiFile.FullName)" >> $env:GITHUB_OUTPUT
            echo "MSI_NAME=$($msiFile.Name)" >> $env:GITHUB_OUTPUT
            echo "Found MSI: $($msiFile.FullName)"
          } else {
            echo "No MSI file found"
            exit 1
          }

      - name: Uninstall Previous Version (if exists)
        shell: pwsh
        run: |
          $appName = "Merchant Center"
          $installed = Get-WmiObject -Query "SELECT * FROM Win32_Product WHERE Name = '$appName'"
          if ($installed) {
            Write-Host "Uninstalling previous version of $appName..."
            $installed | ForEach-Object { $_.Uninstall() }
            Write-Host "$appName uninstalled successfully."
          } else {
            Write-Host "$appName is not installed."
          }

      - name: Archive Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-msi-artifacts
          path: ${{ steps.find_msi.outputs.MSI_PATH }}
          retention-days: 5
          if-no-files-found: error

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.find_msi.outputs.MSI_PATH }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}

      # Fallback release creation method
      - name: Fallback Release Creation
        if: failure() && startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: true